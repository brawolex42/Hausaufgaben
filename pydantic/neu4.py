# from flask import Flask, request, jsonify
# from flask_sqlalchemy import SQLAlchemy
# from pydantic import BaseModel, Field, ValidationError
#
# app = Flask(__name__)
# app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///example.db'
# app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
# db = SQLAlchemy(app)
#
# # –ú–æ–¥–µ–ª—å SQLAlchemy
# class User(db.Model):
#     id = db.Column(db.Integer, primary_key=True)
#     username = db.Column(db.String(20), unique=True, nullable=False)
#     email = db.Column(db.String(120), unique=True, nullable=False)
#
# # –ú–æ–¥–µ–ª—å Pydantic –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
# class UserCreate(BaseModel):
#     username: str = Field(..., min_length=3, max_length=20)
#     email: str = Field(..., pattern=r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$")
#
# class UserResponse(BaseModel):
#     id: int
#     username: str
#     email: str
#
#     class Config:
#         from_attributes = True  # –î–ª—è Pydantic v2 (–∑–∞–º–µ–Ω–∞ orm_mode)
#
# # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
# with app.app_context():
#     db.create_all()
#
# # –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
# @app.route('/')
# def home():
#     return 'Welcome to the Flask API!'
#
# # –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# @app.route('/users', methods=['POST'])
# def create_user():
#     try:
#         user_data = UserCreate(**request.get_json())
#         user = User(username=user_data.username, email=user_data.email)
#         db.session.add(user)
#         db.session.commit()
#         return jsonify(UserResponse.from_orm(user).dict()), 201
#     except ValidationError as e:
#         return jsonify({"error": e.errors()}), 400
#     except Exception as e:
#         db.session.rollback()
#         return jsonify({"error": str(e)}), 500
#
# # –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# @app.route('/users/<int:id>', methods=['GET'])
# def get_user(id):
#     user = User.query.get_or_404(id)
#     return jsonify(UserResponse.from_orm(user).dict())
#
# if __name__ == '__main__':
#     app.run(debug=True)
# üü¶ –ó–ê–î–ê–ß–ê 1: Patient —Å alias –∏ default_factory
# –°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –∞–ª–∏–∞—Å–∞–º–∏ –¥–ª—è
# first_name –∏ last_name(CamelCase), –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
#
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –ü–æ–ª—è: first_name, last_name (–∞–ª–∏–∞—Å—ã: firstName, lastName)
# –ü–æ–ª–µ registration_time: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ default_factory
#
# –í–∫–ª—é—á–∏—Ç—å populate_by_name = True
# –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤ json_schema_extra

from pydantic import BaseModel, Field, ConfigDict
from datetime import datetime

class Patient(BaseModel):
    first_name: str = Field(alias="firstName", description="–ò–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    last_name: str = Field(alias="lastName", description="–§–∞–º–∏–ª–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    registration_time: datetime = Field(default_factory=datetime.utcnow, description="–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞")





    model_config = ConfigDict(
        populate_by_name=True,
        json_schema_extra={
            "example": {
                "firstName": "Ivan",
                "lastName": "Petrov"
            }
        }
    )
patient = Patient(firstName="Ivan", lastName="Petrov")
#print(patient)
print(patient.model_dump(by_alias=True))

from pydantic import BaseModel, Field, ConfigDict
from datetime import datetime

class Patient(BaseModel):
    first_name: str = Field(alias="firstName", description="–ò–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    last_name: str = Field(alias="lastName", description="–§–∞–º–∏–ª–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    registration_time: datetime = Field(default_factory=datetime.utcnow, description="–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞")

    model_config = ConfigDict(
        populate_by_name=True,
        json_schema_extra={
            "example": {
                "firstName": "Ivan",
                "lastName": "Petrov"
            }
        }
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
patients = [
    Patient(firstName="Ivan", lastName="Petrov"),
    Patient(firstName="Anna", lastName="Ivanova"),
    Patient(firstName="Sergey", lastName="Smirnov")
]

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–∂–¥–æ–º –ø–∞—Ü–∏–µ–Ω—Ç–µ
for i, patient in enumerate(patients, 1):
    print(f"–ü–∞—Ü–∏–µ–Ω—Ç {i}:")
    print(f"  –ò–º—è: {patient.first_name}")
    print(f"  –§–∞–º–∏–ª–∏—è: {patient.last_name}")
    print(f"  –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {patient.registration_time.strftime('%Y-%m-%d %H:%M:%S')}")
    print("  JSON:", patient.model_dump(by_alias=True))
    print("-" * 40)

""""""
from pydantic import BaseModel, Field, ConfigDict
from datetime import datetime
from uuid import uuid4, UUID
import json

class Patient(BaseModel):
    id: UUID = Field(default_factory=uuid4, description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    first_name: str = Field(alias="firstName", description="–ò–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    last_name: str = Field(alias="lastName", description="–§–∞–º–∏–ª–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    registration_time: datetime = Field(default_factory=datetime.utcnow, description="–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞")

    model_config = ConfigDict(
        populate_by_name=True,
        json_schema_extra={
            "example": {
                "firstName": "Ivan",
                "lastName": "Petrov"
            }
        }
    )

# –°–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
patients = [
    Patient(firstName="Ivan", lastName="Petrov"),
    Patient(firstName="Anna", lastName="Ivanova"),
    Patient(firstName="Sergey", lastName="Smirnov")
]

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª JSON
with open("patients.json", "w", encoding="utf-8") as f:
    json.dump([p.model_dump(by_alias=True) for p in patients], f, ensure_ascii=False, indent=4, default=str)

# –í—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω
for i, patient in enumerate(patients, 1):
    print(f"–ü–∞—Ü–∏–µ–Ω—Ç {i}:")
    print(f"  ID: {patient.id}")
    print(f"  –ò–º—è: {patient.first_name}")
    print(f"  –§–∞–º–∏–ª–∏—è: {patient.last_name}")
    print(f"  –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {patient.registration_time.strftime('%Y-%m-%d %H:%M:%S')}")
    print("-" * 40)
